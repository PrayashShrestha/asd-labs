@startuml

' Abstract class definition
abstract class Hire {
  +accept(action : Consumer<? super Hire>) : void
}

' Class definitions
class Employee {
  -name : String
  -baseSalary : double
  +accept(action : Consumer<? super Hire>) : void
  +getSalary() : double
  +getTotalSalary() : double
}

class Manager {
  -bonus : double
  -hires : List<Hire>
  +accept(action : Consumer<? super Hire>) : void
  +addEmployee(hire : Hire) : void
  +removeEmployee(hire : Hire) : void
  +getSalary() : double
  +getTotalSalary() : double
}

' Interface definition
interface Consumer<T> {
  +accept(t : T) : void
}

' Concrete Consumer classes
class HireCounterConsumer {
  -count : int
  +accept(hire : Hire) : void
  +getCount() : int
}

class TotalSalaryConsumer {
  -totalSalary : double
  +accept(hire : Hire) : void
  +getTotalSalary() : double
}

' Inheritance relationships
Hire <|-- Employee
Hire <|-- Manager
Employee <|-- Manager

' ' Showing dependency
' Hire ..> Consumer : .

' Interface implementations
Consumer <|-- HireCounterConsumer
Consumer <|-- TotalSalaryConsumer

' Association
Manager "1" *-- "many" Hire : hires

@enduml
